[
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Utilidades_String",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Utilidades_String",
        "description": "Utilidades_String",
        "detail": "Utilidades_String",
        "documentation": {}
    },
    {
        "label": "validar_email",
        "importPath": "mi_paquete_mod_b.strings",
        "description": "mi_paquete_mod_b.strings",
        "isExtraImport": true,
        "detail": "mi_paquete_mod_b.strings",
        "documentation": {}
    },
    {
        "label": "divicion_segura",
        "importPath": "mi_paquete_mod_b",
        "description": "mi_paquete_mod_b",
        "isExtraImport": true,
        "detail": "mi_paquete_mod_b",
        "documentation": {}
    },
    {
        "label": "numero_a_string",
        "importPath": "mi_paquete_mod_b.numbers",
        "description": "mi_paquete_mod_b.numbers",
        "isExtraImport": true,
        "detail": "mi_paquete_mod_b.numbers",
        "documentation": {}
    },
    {
        "label": "saludar",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_a",
        "description": "Laboratorio 1.modulo_a",
        "peekOfCode": "def saludar(nombre):\n    print(f\"Hola, {nombre}! Bienvenido al Centro de Comandos.\")\ndef despedir(nombre):\n    print(f\"Adiós, {nombre}! Gracias por usar el Centro de Comandos.\")\ndef aplaudir(nombre):\n    print(f\"{nombre} aplaude con entusiasmo. ¡Buen trabajo!\")\nacciones = {\n    \"saludar\": saludar,\n    \"despedir\": despedir,\n    \"aplaudir\": aplaudir",
        "detail": "Laboratorio 1.modulo_a",
        "documentation": {}
    },
    {
        "label": "despedir",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_a",
        "description": "Laboratorio 1.modulo_a",
        "peekOfCode": "def despedir(nombre):\n    print(f\"Adiós, {nombre}! Gracias por usar el Centro de Comandos.\")\ndef aplaudir(nombre):\n    print(f\"{nombre} aplaude con entusiasmo. ¡Buen trabajo!\")\nacciones = {\n    \"saludar\": saludar,\n    \"despedir\": despedir,\n    \"aplaudir\": aplaudir\n}\n# No es necesario usar **kwargs en este caso, pero se incluye para demostrar   flexibilidad.",
        "detail": "Laboratorio 1.modulo_a",
        "documentation": {}
    },
    {
        "label": "aplaudir",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_a",
        "description": "Laboratorio 1.modulo_a",
        "peekOfCode": "def aplaudir(nombre):\n    print(f\"{nombre} aplaude con entusiasmo. ¡Buen trabajo!\")\nacciones = {\n    \"saludar\": saludar,\n    \"despedir\": despedir,\n    \"aplaudir\": aplaudir\n}\n# No es necesario usar **kwargs en este caso, pero se incluye para demostrar   flexibilidad.\ndef ejecutar(accion, *args, **kwargs):\n    if accion in acciones:",
        "detail": "Laboratorio 1.modulo_a",
        "documentation": {}
    },
    {
        "label": "ejecutar",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_a",
        "description": "Laboratorio 1.modulo_a",
        "peekOfCode": "def ejecutar(accion, *args, **kwargs):\n    if accion in acciones:\n        funcion = acciones[accion]\n        return funcion(*args, **kwargs)\n    else:\n        return \"Acción no reconocida.\"\nprint(ejecutar(\"saludar\", \"Ana\"))\nprint(ejecutar(\"despedir\", \"Luis\"))\nprint(ejecutar(\"aplaudir\", \"Carlos\"))\nprint(ejecutar(\"cantar\", \"Carlos\"))",
        "detail": "Laboratorio 1.modulo_a",
        "documentation": {}
    },
    {
        "label": "acciones",
        "kind": 5,
        "importPath": "Laboratorio 1.modulo_a",
        "description": "Laboratorio 1.modulo_a",
        "peekOfCode": "acciones = {\n    \"saludar\": saludar,\n    \"despedir\": despedir,\n    \"aplaudir\": aplaudir\n}\n# No es necesario usar **kwargs en este caso, pero se incluye para demostrar   flexibilidad.\ndef ejecutar(accion, *args, **kwargs):\n    if accion in acciones:\n        funcion = acciones[accion]\n        return funcion(*args, **kwargs)",
        "detail": "Laboratorio 1.modulo_a",
        "documentation": {}
    },
    {
        "label": "CantidadInvalida",
        "kind": 6,
        "importPath": "Laboratorio 1.modulo_b",
        "description": "Laboratorio 1.modulo_b",
        "peekOfCode": "class CantidadInvalida(Exception):\n    \"\"\"Excepción lanzada cuando la cantidad es inválida (<= 0)\"\"\"\n    def __init__(self, mensaje=\"La cantidad debe ser mayor que 0\"):\n        self.mensaje = mensaje\n        super().__init__(self.mensaje)\ndef calcular_total(precio_unitario: float, cantidad: int) -> float:\n    \"\"\"\n    Calcula el total de una compra.\n    Args:\n        precio_unitario: Precio de cada unidad",
        "detail": "Laboratorio 1.modulo_b",
        "documentation": {}
    },
    {
        "label": "parsear_enteros",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_b",
        "description": "Laboratorio 1.modulo_b",
        "peekOfCode": "def parsear_enteros(entradas: list[str]) -> tuple[list[int], list[str]]:\n    \"\"\"\n    Convierte una lista de strings a enteros, capturando errores.\n    Args:\n        entradas: Lista de strings que se intentarán convertir\n    Returns:\n        Tupla con (valores_convertidos, lista_de_errores)\n    \"\"\"\n    valores = []\n    errores = []",
        "detail": "Laboratorio 1.modulo_b",
        "documentation": {}
    },
    {
        "label": "calcular_total",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_b",
        "description": "Laboratorio 1.modulo_b",
        "peekOfCode": "def calcular_total(precio_unitario: float, cantidad: int) -> float:\n    \"\"\"\n    Calcula el total de una compra.\n    Args:\n        precio_unitario: Precio de cada unidad\n        cantidad: Número de unidades\n    Returns:\n        float: Total de la compra\n    Raises:\n        CantidadInvalida: Si cantidad <= 0",
        "detail": "Laboratorio 1.modulo_b",
        "documentation": {}
    },
    {
        "label": "procesar_compra",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_b",
        "description": "Laboratorio 1.modulo_b",
        "peekOfCode": "def procesar_compra(precio_unitario: float, cantidad: int) -> str:\n    \"\"\"\n    Procesa una compra y maneja las excepciones.\n    \"\"\"\n    try:\n        total = calcular_total(precio_unitario, cantidad)\n        return f\"Total calculado: ${total:.2f}\"\n    except CantidadInvalida as e:\n        return f\"Error de cantidad: {e}\"\n    except ValueError as e:",
        "detail": "Laboratorio 1.modulo_b",
        "documentation": {}
    },
    {
        "label": "entradas1",
        "kind": 5,
        "importPath": "Laboratorio 1.modulo_b",
        "description": "Laboratorio 1.modulo_b",
        "peekOfCode": "entradas1 = [\"10\", \"x\", \"3\"]\nvalores, errores = parsear_enteros(entradas1)\nprint(\"B.1 – Validación de entrada\")\nprint(\"Entradas:\", entradas1)\nprint(\"Valores convertidos:\", valores)\nprint(\"Errores:\", errores)\nprint()\n# B.2 – Excepciones personalizadas y raise\n# Excepción personalizada\nclass CantidadInvalida(Exception):",
        "detail": "Laboratorio 1.modulo_b",
        "documentation": {}
    },
    {
        "label": "requiere_positivos",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_c",
        "description": "Laboratorio 1.modulo_c",
        "peekOfCode": "def requiere_positivos(func: Callable) -> Callable: # Callable representa un objeto que puede ser llamado (como una función)\n    \"\"\"\n    Decorador que verifica que todos los argumentos numéricos sean > 0.\n    Si alguno no lo es, lanza ValueError.\n    \"\"\"\n    @wraps(func) # es un decorador que ayuda a preservar la metadata de la función original cuando se crea un decorador\n    def wrapper(*args, **kwargs):\n        # Combinar args y kwargs en un solo iterable de valores\n        valores = list(args) + list(kwargs.values())\n        # Verificar que todos los valores numéricos sean positivos",
        "detail": "Laboratorio 1.modulo_c",
        "documentation": {}
    },
    {
        "label": "calcular_descuento",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_c",
        "description": "Laboratorio 1.modulo_c",
        "peekOfCode": "def calcular_descuento(precio: float, porcentaje: float) -> float:\n    \"\"\"\n    Calcula el precio final después de aplicar un descuento.\n    Args:\n        precio: Precio original\n        porcentaje: Porcentaje de descuento (ej: 0.2 para 20%)\n    Returns:\n        Precio con descuento aplicado\n    \"\"\"\n    return precio * (1 - porcentaje)",
        "detail": "Laboratorio 1.modulo_c",
        "documentation": {}
    },
    {
        "label": "escala",
        "kind": 2,
        "importPath": "Laboratorio 1.modulo_c",
        "description": "Laboratorio 1.modulo_c",
        "peekOfCode": "def escala(valor: float, factor: float) -> float:\n    \"\"\"\n    Multiplica un valor por un factor de escala.\n    Args:\n        valor: Valor original\n        factor: Factor de escala (> 0)\n    Returns:\n        Valor escalado\n    \"\"\"\n    return valor * factor",
        "detail": "Laboratorio 1.modulo_c",
        "documentation": {}
    },
    {
        "label": "divicion_segura",
        "kind": 2,
        "importPath": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "description": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "peekOfCode": "def divicion_segura(a: float, b: float) -> float:\n    \"\"\"Divide dos números de forma segura (maneja división por cero).\"\"\"\n    if b == 0:\n        raise ValueError(\"División por cero no permitida.\")\n    return a / b\ndef numero_a_string(numero: float) -> str:\n    \"\"\"\n    Formatea un número como cadena y lo normaliza usando una función del módulo 'strings'.\n    Ejemplo de uso de importación RELATIVA dentro del paquete.\n    \"\"\"",
        "detail": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "documentation": {}
    },
    {
        "label": "numero_a_string",
        "kind": 2,
        "importPath": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "description": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "peekOfCode": "def numero_a_string(numero: float) -> str:\n    \"\"\"\n    Formatea un número como cadena y lo normaliza usando una función del módulo 'strings'.\n    Ejemplo de uso de importación RELATIVA dentro del paquete.\n    \"\"\"\n    raw_string = f\"El resultado es {numero:.2f}\"\n    return normalizar_string(raw_string)  # ¡Uso de la función importada!",
        "detail": "Laboratorio 2.mi_paquete_mod_b.numbers",
        "documentation": {}
    },
    {
        "label": "normalizar_string",
        "kind": 2,
        "importPath": "Laboratorio 2.mi_paquete_mod_b.strings",
        "description": "Laboratorio 2.mi_paquete_mod_b.strings",
        "peekOfCode": "def normalizar_string(s: str) -> str:\n    \"\"\"Normaliza una cadena (minúsculas, espacios consistentes).\"\"\"\n    return \" \".join(s.strip().lower().split())\ndef validar_email(email: str) -> bool:\n    \"\"\"Valida formato básico de email (contiene '@' y dominio con '.').\"\"\"\n    return \"@\" in email and \".\" in email.split(\"@\")[1]",
        "detail": "Laboratorio 2.mi_paquete_mod_b.strings",
        "documentation": {}
    },
    {
        "label": "validar_email",
        "kind": 2,
        "importPath": "Laboratorio 2.mi_paquete_mod_b.strings",
        "description": "Laboratorio 2.mi_paquete_mod_b.strings",
        "peekOfCode": "def validar_email(email: str) -> bool:\n    \"\"\"Valida formato básico de email (contiene '@' y dominio con '.').\"\"\"\n    return \"@\" in email and \".\" in email.split(\"@\")[1]",
        "detail": "Laboratorio 2.mi_paquete_mod_b.strings",
        "documentation": {}
    },
    {
        "label": "saludar",
        "kind": 2,
        "importPath": "Laboratorio 2.modulo_c",
        "description": "Laboratorio 2.modulo_c",
        "peekOfCode": "def saludar(nombre: str) -> str:\n    return f\"Hola, {nombre}\"\nedad: int = 25\naltura: float = 1.75\nes_estudiante: bool = True\nfrom typing import List # proporciona soporte para type hints (sugerencias de tipo)\ndef obtener_nombres() -> List[str]:\n    return [\"Ana\", \"Luis\", \"Carlos\"]\nnumeros: List[int] = [1, 2, 3, 4, 5]\nfrom typing import Union",
        "detail": "Laboratorio 2.modulo_c",
        "documentation": {}
    },
    {
        "label": "obtener_nombres",
        "kind": 2,
        "importPath": "Laboratorio 2.modulo_c",
        "description": "Laboratorio 2.modulo_c",
        "peekOfCode": "def obtener_nombres() -> List[str]:\n    return [\"Ana\", \"Luis\", \"Carlos\"]\nnumeros: List[int] = [1, 2, 3, 4, 5]\nfrom typing import Union\ndef convertir_valor(valor: str) -> Union[int, float]:\n    if \".\" in valor:\n        return float(valor)\n    return int(valor)\nresultado: Union[int, str] = 42  # Puede ser int o str\nfrom typing import Optional",
        "detail": "Laboratorio 2.modulo_c",
        "documentation": {}
    },
    {
        "label": "convertir_valor",
        "kind": 2,
        "importPath": "Laboratorio 2.modulo_c",
        "description": "Laboratorio 2.modulo_c",
        "peekOfCode": "def convertir_valor(valor: str) -> Union[int, float]:\n    if \".\" in valor:\n        return float(valor)\n    return int(valor)\nresultado: Union[int, str] = 42  # Puede ser int o str\nfrom typing import Optional\ndef encontrar_usuario(id_usuario: int) -> Optional[str]:\n    if id_usuario == 1:\n        return \"Administrador\"\n    return None",
        "detail": "Laboratorio 2.modulo_c",
        "documentation": {}
    },
    {
        "label": "encontrar_usuario",
        "kind": 2,
        "importPath": "Laboratorio 2.modulo_c",
        "description": "Laboratorio 2.modulo_c",
        "peekOfCode": "def encontrar_usuario(id_usuario: int) -> Optional[str]:\n    if id_usuario == 1:\n        return \"Administrador\"\n    return None\nusuario: Optional[str] = encontrar_usuario(2)  # Puede ser str o None\nprint(\"##########################################\\n\")\nprint(\"=== Pruebas de las funciones ===\\n\")\n# Prueba de la función `saludar`\nprint(\"1. Función `saludar`: Saludamos a 'María'\")\nprint(saludar(\"María\")) ",
        "detail": "Laboratorio 2.modulo_c",
        "documentation": {}
    },
    {
        "label": "normalizar_string",
        "kind": 2,
        "importPath": "Laboratorio 2.Utilidades_String",
        "description": "Laboratorio 2.Utilidades_String",
        "peekOfCode": "def normalizar_string(s: str) -> str:\n    \"\"\"\n    Normaliza una cadena:\n    - Elimina espacios al inicio/final.\n    - Convierte a minúsculas.\n    - Reemplaza múltiples espacios por uno solo.\n    Args:\n        s: Cadena de entrada.\n    Returns:\n        Cadena normalizada.",
        "detail": "Laboratorio 2.Utilidades_String",
        "documentation": {}
    },
    {
        "label": "validar_email",
        "kind": 2,
        "importPath": "Laboratorio 2.Utilidades_String",
        "description": "Laboratorio 2.Utilidades_String",
        "peekOfCode": "def validar_email(email: str) -> bool:\n    \"\"\"\n    Valida si un email tiene formato básico:\n    - Contiene '@' y un dominio con '.' (ej: usuario@dominio.com).\n    Args:\n        email: Cadena a validar.\n    Returns:\n        True si es válido, False en caso contrario.\n    \"\"\"\n    if \"@\" not in email:",
        "detail": "Laboratorio 2.Utilidades_String",
        "documentation": {}
    },
    {
        "label": "formato_telefono",
        "kind": 2,
        "importPath": "Laboratorio 2.Utilidades_String",
        "description": "Laboratorio 2.Utilidades_String",
        "peekOfCode": "def formato_telefono(telefono: str) -> str:\n    \"\"\"\n    Formatea un número de teléfono a estilo (365) 456-7890.\n    Args:\n        phone: Cadena con 10 dígitos numéricos.\n    Returns:\n        Cadena formateada.\n    Raises:\n        ValueError: Si la cadena no tiene 10 dígitos numéricos.\n    \"\"\"             # .isdigit() Verifica si una cadena contiene solo dígitos numéricos (0-9).",
        "detail": "Laboratorio 2.Utilidades_String",
        "documentation": {}
    }
]